Overview
- 1. Another unique feature of the C language that is not found in many other higher-level programming languages

- 2. Allows for programs to be easier to develop, easier to read, easier to modify, and easier to port to different computer systems

- 3. Part of the C compilation process that recognizes special statements
  = 1. Analyzes these statements before analysis of the C program itself takes place
  = 2. An introduction to your compiler to do something before compiling the source code
  = 3. Could be anywhere in your code

Overview (cont'd)
- 1. Preprocessor statements are identified by the presence of a pound sign, #, which must be the first non-space character on the line

- 2. Our first "challenge" used a preprocessor directive, specifically the #include directive
- 3. We will utilize the preprocessor to:
  = 1. Create are own constatns and macros with the #define statement
  = 2. Build your own library files with the #include statement
  = 3. Make more powerful programs with the conditional #ifdef, #endif, #else, and #ifndef Statements

- 4. We will cover the above in future lectures

#include
1. Overview
- 1. Basic concept in C
- 2. The #include statement is a preprocessor directive
- 3. #include <stdio.h>
- 4. It is not strictly part of the executable program, however, the program won't work without it
- 5. The symbol # indicates this is a preprocessing directive
  = 1. An instruction to your compiler to do something before compiling the source code
  = 2. Many preprocessing directives
  = 3. Are usually some at the beginning of the program source file, but they can be anywhere
  = 4. Similar to the import statement in Java

- 6. In the above example, the compiler is instructed to "include" in your program the contents of the file with the name stdio.h
  = 1. Called a header file because it is usally included at the head of a program source file
  = 2. .h extension

Header files
- 1. Header files define information about some of the functions that are provided by that file
  = 1. stdio.h is the standard C library header and provides functionality for displaying output, among many other things

  = 2. We need to include this file in a program when using the printf() function from the standard library
    -> Libraries 
       = 1. Additional functionality that's already written for you and C
       = 2. You can include in your program so you don't have to rewrite it

  = 3. stdio.h contains the information that the compiler needs to understand what printf() means, as well as other functions that deal with input and output

  = 4. Stdio, is short for standard input/output.

- 2. Header files specify information that the compiler uses to integrate any predefined functions within a program

  = Header files that define functionality or function prototypes for networking & socket code

- 3. You will be creating your own header files for use with your programs

Syntax
- 1. Header file names are case sensitive on some systems, so you should always write them in lowercase

  = Case sensitivity - Uppercase or Lowercase

- 2. Two ways to #include header files in a program
  = 1. Using angle brackets (#include <Jason.h>)
    -> Tells the preprocessor to look for the file in one or more standard system directories

  = 2. Using double quotes (#include "Jason.h")
    -> Tells the preprocessor to first look in the current directory
	
- 3. Every C compiler that conforms to the C11 standard will have a set of standard header files supplied with it

- 4. You should use #ifndef and #define to protect against multiple inclusions of a header file
- 5. Example

// some header

// typedefs
typedef struct names_st names;

// function prototypes
void get_names(names *);
void show_names(const names*);
chat * s_gets (char * st, int n);

header files includes many different things
  # define directives
  structure declarations
  typedef statements
  function prototypes

executable code normally goes into a source code file, not a header file



