I. Higher Level Programming Languages
1. Compilers
- 1. A program that translates the high-level language source code into the detaeiled set of machine language instructions the computer requires
  
  = Compilation
    -> 1. Convert Source code (Written in C Language) to the Machine Code (in CS)
    -> 2. Convert Korean to the English (in Human Language)

- 2. The program does the high-level thinking and the compiler generates the tedious instructions to the cpu

2. Compilers will also check that your program has valid syntax for the programming language that you are compiling

- Finds errors and it reports them to you and doesn't produce an executable until you fix them

3. High-level languages are easier to learn and much easier to program in than are machine languages

II. Writing a program
1. Define the program objectives
- 1. Understand the requirements of the program
- 2. Get a clear idea of what you want the program to accomplish

2. Design the program
- 1. Decide how to program will meet the above requirements
- 2. What should the user interface be like?
- 3. How should the program be organized?

3. Write the code
- 1. Start implementation, translate the design in the syntax of C
- 2. You need to use a text editor to create what is called a source code file

4. Compile
- 1. Translate the source code into machine code (executable code)
- 2. Consists of detailed instructions to the CPU expressed in a numeric code

5. Run the program
- The executable file is a program you can run

6. Test and debug the program
- 1. Just because a program is running, does not mean it works as intended
- 2. Need to test, to see that your program does what it is supposed to do (may find bugs)
  = 1. Debugging is the process of finding and fixing program errors
  = 2. Making mistakes is a natural part of learning

7. Maintain and modify the program
- 1. Programs are released and used by many people
- 2. Have to continue to fix new bugs or add new features

8. For the above steps, you may have to jump around steps and repeat steps
- E.g. when you are writing code, you might find that your plan was impractical

*** 
Divide and conquer
- Work in small steps and constantly test
- Ex) 5 lines of codes, and test it. And another 5 lines of codes, and test it
***

